#SingleInstance Force
#Warn
code_abbey.input_box()          ; Runs user input box
Return

*Esc::ExitApp                   ; Emergency killswitch

Class code_abbey
{
    Static hwnd := {}           ; Stores all gui handles
    Static ws   := " `t`r`n"    ; Whitespace
    
    ; Creates multi-line input box
    input_box() {
        Local
        ; GUI size properties
        hwnd   := ""
        edit_w := 400
        edit_h := 300
        btn_w  := 100
        btn_h  := 25
        btn_x  := edit_w - btn_w
        
        Gui, CIB:New,                                                       ; New gui
            this.hwnd.gui := hwnd
        Gui, Margin, 5, 5
        Gui, Font,, Courier New
        Gui, Font,, Consolas
        Gui, Add, Edit, xm ym w%edit_w% h%edit_h% +Multi HWNDhwnd           ; Add large edit box for pasting multiple case sets
            this.hwnd.edit := hwnd
        Gui, Add, Button, xm y+m w%btn_w% h%btn_h% HWNDhwnd, Submit         ; Submit button
            this.hwnd.btn_submit := hwnd
            bf := ObjBindMethod(this, "Submit")
            GuiControl, +g, % hwnd, % bf
        Gui, Add, Button, xm+%btn_x% yp w%btn_w% h%btn_h% HWNDhwnd, Cancel  ; Cancel button
            this.hwnd.btn_cancel := hwnd
            bf := ObjBindMethod(this, "Quit")
            GuiControl, +g, % hwnd, % bf
        Gui, Show, AutoSize
        
        Return
    }
    
    ; Submits data to be verified and operated on
    Submit() {
        Local
        GuiControlGet, data,, % this.hwnd.edit                  ; Get data
        GuiControl,, % this.hwnd.edit, % ""                     ; Empty data box
        
        case_total := 0
        case_arr   := []
        
        Loop, Parse, % data, % "`n", % "`r"                     ; Parse data in an array
            If (A_Index = 1)                                    ; First line contains total cases
                case_total := A_LoopField
            Else case_arr.Push(StrSplit(A_LoopField, " "))      ; Add all cases to array
        
        this.check(case_total, case_arr)                        ; Verify data and check for errors
        
        result := ""
        For case_num, case in case_arr
            result := this.time_diff(case_arr) " "              ; Assign result
        
        result := RTrim(result, " ")
        
        MsgBox, 0x4, Finished, % "Save results to the clipboard?"
            . "`n`nResults:`n" result
        IfMsgBox, Yes
            Clipboard := result
        ExitApp
    }
    
    ; Validate input
    Check(total, cases) {
        Local
        
        If (total != cases.MaxIndex())                                              ; Verify that first line matches total number of cases
            this.error("Case total number does not match actual total of cases"
                , total
                , cases.MaxIndex()
                , "2`n5 3 23 22 24 4 20 45`n8 4 6 47 9 11 51 13")
        For case_num, case in cases                                                 ; Verify each case has only 3 numbers
            For index, value in case
                If !(this.is_int(value))
                    this.error("Must contain."
                        , value
                        , "integer"
                        , "Ex: 1 0 3 15`n12 10 8 41 2 3`n100 42 307")
                Else If (A_Index > 8)
                    this.error("Each case must contain 8 positive integers separated by spaces."
                    . "5 3 23 22 24 4 20 45`n8 4 6 47 9 11 51 13")
        
        Return True
    }
    
    ; Find the time difference between two numbers
    ; case is in format:
    ;  1     2      3     4     5     6      7     8
    ; [day1, hour1, min1, sec1, day2, hour2, min2, sec2]
    time_diff(case) {
        Local
        res       := "("
        t_convert := [86400,3600,60,1]
        time      := 0
        
        Loop, 4                                             ; Convert to sec
            time += t_convert[A_Index] * case[A_Index+4]
        Loop, 4                                             ; Diff the times
            time -= t_convert[A_Index] * case[A_Index]
        Loop, 3                                             ; Build (d h m s) format
            num   := Floor(time/t_convert[A_Index])
            ,res  .= num " "
            ,time := time - num + Mod(time, num)
        
        Return res " " time ")"
    }
    
    ; Error handling
    error(msg, found, expected, example) {
        MsgBox, 0x0, % "Error found!"
            , % msg
            . "`nFound: " found
            . "`nExpected: " expected
            . "`nExample: " example
        Exit
    }
    
    Quit() {
        ExitApp
    }
    
    ; Check if integer
    is_int(num) {
        Return (Mod(num, 1) = 0)
    }
    
    ; Check if number
    is_num(num) {
        Return (num + 0 != "")
    }
    
    ; Check if positive number
    is_pos_num(num) {
        Return (num + 0 > 0)
    }

}

