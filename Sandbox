#SingleInstance Force
#Warn
code_abbey.input_box()          ; Runs user input box
Return

*Esc::ExitApp                   ; Emergency killswitch

Class code_abbey
{
    Static hwnd := {}           ; Stores all gui handles
    Static ws   := " `t`r`n"    ; Whitespace
    
    ; Creates multi-line input box
    input_box() {
        Local
        ; GUI size properties
        hwnd   := ""
        edit_w := 400
        edit_h := 300
        btn_w  := 100
        btn_h  := 25
        btn_x  := edit_w - btn_w
        
        Gui, CIB:New,                                                       ; New gui
            this.hwnd.gui := hwnd
        Gui, Margin, 5, 5
        Gui, Font,, Courier New
        Gui, Font,, Consolas
        Gui, Add, Edit, xm ym w%edit_w% h%edit_h% +Multi HWNDhwnd           ; Add large edit box for pasting multiple case sets
            this.hwnd.edit := hwnd
        Gui, Add, Button, xm y+m w%btn_w% h%btn_h% HWNDhwnd, Submit         ; Submit button
            this.hwnd.btn_submit := hwnd
            bf := ObjBindMethod(this, "Submit")
            GuiControl, +g, % hwnd, % bf
        Gui, Add, Button, xm+%btn_x% yp w%btn_w% h%btn_h% HWNDhwnd, Cancel  ; Cancel button
            this.hwnd.btn_cancel := hwnd
            bf := ObjBindMethod(this, "Quit")
            GuiControl, +g, % hwnd, % bf
        Gui, Show, AutoSize
        
        Return
    }
    
    ; Submits data to be verified and operated on
    Submit() {
        Local
        
        GuiControlGet, data,, % this.hwnd.edit      ; Get data
        GuiControl,, % this.hwnd.edit, % ""         ; Empty data box
        
        case_arr := StrSplit(A_LoopField, " ")      ; Add all cases to array
        this.check(case_arr)                        ; Verify data and check for errors
        
        this.check(case)                            ; Validate data
        result := this.modular_calc(case)           ; Assign each result
        
        MsgBox, 0x4, Finished, % "Save results to the clipboard?"
            . "`n`nResults:`n" result
        IfMsgBox, Yes
            Clipboard := result
        ExitApp
    }
    
    ; Validate input
    Check(case) {
        Local
        example := "5`n+ 3`n* 7`n+ 10`n* 2`n* 3`n+ 1`n% 11"
        last_i  := case.MaxIndex()
        
        Loop, Parse, % case, % "`n" , % "`r"
            If (A_Index > 1)
                If !this.is_int(A_LoopField)
                    this.error("First number must be an integer")
            Else If (A_Index = last_i)
                data := StrSplit(A_LoopField, " ")
                , (data.1 != "%"
                    ? this.error("The last line should start with a percent sign (%)."
                        , data.1
                        , "%"
                        , example)
                    : "" )
                , (!this.is_int(data.2)
                    ? this.error("The last line should end with an intger."
                        . "`nA space should separate the integer from the percent sign.")
                    : "")
            Else
                data := StrSplit(A_LoopField, " ")
                ,(data.1 != "+" && data.1 != "*"
                    ? this.error("Lines between the first and last should start with a plus or multiplication sign."
                        , data.1
                        , "+ *"
                        , example)
                    : "")
                ,(!this.is_int(data.2)
                    ? this.error("All lines should end with an integer."
                        , data.2
                        , "integer"
                        , example)
                    : "")
        
        Return True
    }
    
    modular_calc(case) {
        Local
        
        case := StrSplit(case, " ")
        
        Return
    }
    
    ; Error handling
    error(msg, found, expected, example) {
        MsgBox, 0x0, % "Error found!"
            , % msg
            . "`nFound: " found
            . "`nExpected: " expected
            . "`nExample: " example
        Exit
    }
    
    Quit() {
        ExitApp
    }
    
    ; Check if integer
    is_int(num) {
        Return (Mod(num, 1) = 0)
    }
    
    ; Check if number
    is_num(num) {
        Return (num + 0 != "")
    }
    
    ; Check if positive number
    is_pos_num(num) {
        Return (num + 0 > 0)
    }

}
