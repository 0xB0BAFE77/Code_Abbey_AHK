#SingleInstance Force
#Warn
code_abbey.input_box()          ; Runs user input box
Return

*Esc::ExitApp                   ; Emergency killswitch

Class code_abbey
{
    Static hwnd := {}           ; Stores all gui handles
    Static ws   := " `t`r`n"    ; Whitespace
    
    ; Creates multi-line input box
    input_box() {
        Local
        ; GUI size properties
        hwnd   := ""
        edit_w := 400
        edit_h := 300
        btn_w  := 100
        btn_h  := 25
        btn_x  := edit_w - btn_w
        
        Gui, CIB:New,                                                       ; New gui
            this.hwnd.gui := hwnd
        Gui, Margin, 5, 5
        Gui, Font,, Courier New
        Gui, Font,, Consolas
        Gui, Add, Edit, xm ym w%edit_w% h%edit_h% +Multi HWNDhwnd           ; Add large edit box for pasting multiple case sets
            this.hwnd.edit := hwnd
        Gui, Add, Button, xm y+m w%btn_w% h%btn_h% HWNDhwnd, Submit         ; Submit button
            this.hwnd.btn_submit := hwnd
            bf := ObjBindMethod(this, "Submit")
            GuiControl, +g, % hwnd, % bf
        Gui, Add, Button, xm+%btn_x% yp w%btn_w% h%btn_h% HWNDhwnd, Cancel  ; Cancel button
            this.hwnd.btn_cancel := hwnd
            bf := ObjBindMethod(this, "Quit")
            GuiControl, +g, % hwnd, % bf
        Gui, Show, AutoSize
        
        Return
    }
    
    ; Submits data to be verified and operated on
    Submit() {
        Local
        
        GuiControlGet, data,, % this.hwnd.edit          ; Get data
        GuiControl,, % this.hwnd.edit, % ""             ; Empty data box
        
        case_arr := StrSplit(data, "`n", "`r")
        case_total := case_arr.RemoveAt(1)
        
        result := ""
        For index, case in case_arr
            result .= this.linear_con_gen(StrSplit(case, " ")) " "
        result := RTrim(result, " ")
        
        MsgBox, 0x4, Finished, % "Save results to the clipboard?"
            . "`n`nResults:`n" result
        IfMsgBox, Yes
            Clipboard := result
        ExitApp
    }
    
    ; Linear Congruential Generator
    linear_con_gen(arr) {
        Local
        x := arr.4
        
        Loop, % arr.5
            x := Mod(arr.1 * x + arr.2, arr.3)
        
        Return x
    }
    
    swap(arr, i1, i2) {
        Local
        tmp := arr[i1]
        ,arr[i1] := arr[i2]
        ,arr[i2] := tmp
        Return
    }
    
    checksum(arr) {
        Local
        
        result := 0
        seed   := 113
        mod_v  := 10000007
        
        For index, num in arr
            result := Mod((result + num) * seed, mod_v)
        
        Return result
    }
    
    Quit() {
        ExitApp
    }
    
    ; Check if integer
    is_int(num) {
        Return (Mod(num, 1) = 0)
    }
    
    ; Check if number
    is_num(num) {
        Return (num + 0 != "")
    }
    
    ; Check if positive number
    is_pos_num(num) {
        Return (num + 0 > 0)
    }
}
